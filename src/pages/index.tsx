import styles from '@/styles/Home.module.css'
import Head from 'next/head'
import Image from 'next/image'
import { Chain, base, gnosis, polygon, sepolia } from 'viem/chains'
import {
  useAccount,
  useDisconnect,
  useSwitchChain,
  useWalletClient
} from 'wagmi'

import {
  SafeProvider,
  createConfig,
  useSafe,
  useSendSafeOperation
} from '@safe-global/safe-react-hooks'

const chains = [gnosis, base, polygon, sepolia] as const

const PIMLICO_API_KEY = 'pim_mAzX6WFFpSLoZDDWDKHsSE'

const chainLogo: Record<number, string> = {
  [gnosis.id]: '/gnosis.png',
  [base.id]: '/base.png',
  [polygon.id]: '/polygon.png',
  [sepolia.id]: '/sepolia.png'
  // [arbitrum.id]: "/arbitrum.png",
  // [optimism.id]: "/optimism.png",
}

const chainShortname: Record<number, string> = {
  [gnosis.id]: 'gno',
  [base.id]: 'base',
  [polygon.id]: 'matic',
  [sepolia.id]: 'sep'
  // [arbitrum.id]: "arb1",
  // [optimism.id]: "oeth",
}

function App() {
  const { address } = useAccount()

  const { openConnectModal } = useConnectModal()
  const { disconnect } = useDisconnect()

  const isSignerConnected = !!address

  return (
    <div className={styles.content}>
      {isSignerConnected && (
        <div>
          <button onClick={() => disconnect()} className={styles.button}>
            Disconnect Wallet
          </button>
        </div>
      )}

      <p>this a demo app to showcase the safe react hooks!</p>
      <p>
        You can deploy your Safe account in different chains with the same
        adress!
      </p>

      {isSignerConnected ? (
        <div>
          <p className={styles.ownerlabel}>owner: {address}</p>

          {/* Safe list */}
          <h2 className={styles.safetitle}>Safe Accouts</h2>

          <ul className={styles.safelist}>
            {chains.map((chain) => {
              // Safe options
              const safeOptions = {
                owners: [address!],
                threshold: 1,
                saltNonce: '123'
              }

              // Bundler URL
              const BUNDLER_URL = `https://api.pimlico.io/v2/${chain.id}/rpc?apikey=${PIMLICO_API_KEY}` // PIMLICO

              // Paymaster URL
              const PAYMASTER_URL = `https://api.pimlico.io/v2/${chain.id}/rpc?apikey=${PIMLICO_API_KEY}` // PIMLICO

              const config = createConfig({
                chain: chain as any,
                provider:
                  chain.name === 'Sepolia'
                    ? 'https://sepolia.gateway.tenderly.co'
                    : chain.rpcUrls.default.http[0],
                signer: address!,
                safeOptions,
                safeOperationOptions: {
                  isSponsored: true,
                  bundlerUrl: BUNDLER_URL,
                  paymasterUrl: PAYMASTER_URL
                }
              })

              return (
                <SafeProvider config={config} key={chain.id}>
                  <li className={styles.safeitem}>
                    <SafeAccountComponent
                      chain={chain}
                      ownerAddress={address}
                      chainLogo={chainLogo[chain.id]}
                    />
                  </li>
                </SafeProvider>
              )
            })}
          </ul>
        </div>
      ) : (
        <button onClick={openConnectModal} className={styles.button}>
          Connect Wallet
        </button>
      )}
    </div>
  )
}

import {
  RainbowKitProvider,
  getDefaultConfig,
  useConnectModal
} from '@rainbow-me/rainbowkit'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { WagmiProvider } from 'wagmi'

import '@rainbow-me/rainbowkit/styles.css'

const queryClient = new QueryClient()

const config = getDefaultConfig({
  appName: 'My RainbowKit App',
  projectId: 'YOUR_PROJECT_ID',
  chains: chains,
  ssr: true // If your dApp uses server side rendering (SSR)
})

export default function Home() {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>
        <RainbowKitProvider>
          <Head>
            <title>Create Next App</title>
            <meta name="description" content="Generated by create next app" />
            <meta
              name="viewport"
              content="width=device-width, initial-scale=1"
            />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <div
            className={`${styles.page}`}
          >
            <Image
              className={styles.logo}
              src="./safe.svg"
              alt="Safe logo"
              height={200}
              width={300}
              priority
            />

            <main className={styles.main}>
              <App />
            </main>

            <footer className={styles.footer}>
              <a
                href="https://docs.safe.global/home/what-is-safe"
                target="_blank"
                rel="noopener noreferrer"
              >
                <Image
                  aria-hidden
                  src="https://nextjs.org/icons/globe.svg"
                  alt="Globe icon"
                  width={16}
                  height={16}
                />
                Go to Safe docs â†’
              </a>
            </footer>
          </div>
        </RainbowKitProvider>
      </QueryClientProvider>
    </WagmiProvider>
  )
}

type SafeAccountComponentType = {
  chain: Chain
  chainLogo: string
  ownerAddress: string
}

function SafeAccountComponent({
  chain,
  chainLogo,
  ownerAddress
}: SafeAccountComponentType) {
  const { getSafeInfo } = useSafe()

  const safeInfo = getSafeInfo()

  const safeAddress = safeInfo?.data?.address
  const isSafeDeployed = safeInfo?.data?.isDeployed
  const chainLabel = chainShortname[chain.id]
  const baseWalletUrl = `https://app.safe.global/home?safe=`
  const walletUrl = `${baseWalletUrl}${chainLabel}:${safeAddress}`

  const { data: walletClient } = useWalletClient()

  const showDeploySafeButton = safeAddress && !isSafeDeployed && walletClient

  return (
    <>
      <Image
        aria-hidden
        src={chainLogo}
        alt={`${chain.name} icon`}
        width={24}
        height={24}
      />{' '}
      {!!safeInfo?.data?.address ? (
        <>
          <a href={walletUrl} target={'_blank'}>
            <pre>{safeInfo?.data?.address}</pre>
          </a>{' '}
          {showDeploySafeButton && (
            <DeploySafeButton
              chain={chain}
              safeAddress={safeInfo?.data?.address}
              signer={ownerAddress}
              walletClient={walletClient}
            />
          )}
        </>
      ) : (
        <span>Loading...</span>
      )}
    </>
  )
}

function DeploySafeButton({ chain, safeAddress, signer, walletClient }: any) {
  const { switchChain } = useSwitchChain()

  const safeOptions = {
    owners: [signer!],
    threshold: 1,
    saltNonce: '123'
  }

  // Bundler URL
  const BUNDLER_URL = `https://api.pimlico.io/v2/${chain.id}/rpc?apikey=${PIMLICO_API_KEY}` // PIMLICO

  // Paymaster URL
  const PAYMASTER_URL = `https://api.pimlico.io/v2/${chain.id}/rpc?apikey=${PIMLICO_API_KEY}` // PIMLICO

  const config = createConfig({
    chain,
    provider: {
      request: walletClient.request
    },
    signer: signer!,
    safeOptions,
    safeOperationOptions: {
      isSponsored: true,
      bundlerUrl: BUNDLER_URL,
      paymasterUrl: PAYMASTER_URL
    }
  })

  const { sendSafeOperation } = useSendSafeOperation({ config })

  const transactions = [
    {
      to: safeAddress,
      data: '0x',
      value: '0'
    }
  ]

  // transaction + deploy
  async function deploySafeAccount() {
    switchChain({ chainId: chain.id })
    sendSafeOperation({ transactions })
  }

  return (
    <button onClick={deploySafeAccount} className={styles.button}>
      Deploy Safe
    </button>
  )
}
